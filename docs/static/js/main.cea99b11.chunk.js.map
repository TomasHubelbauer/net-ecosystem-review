{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","records","setRecords","selectedRecordIndex","setSelectedRecordIndex","useEffect","a","fetch","response","text","split","slice","map","fileName","state","length","loadRecord","recordIndex","record","index","items","item","id","name","stars","Number","_records","renderRelatedRecord","sign","findIndex","i","comparedItem","onChange","event","currentTarget","value","undefined","key","selectedRecord","error","message","prevRecord","nextRecord","renderSelectedRecord","render","document","getElementById"],"mappings":"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","file":"static/js/main.cea99b11.chunk.js","sourcesContent":["import './App.css';\nimport React, { FC, useEffect, useState, ChangeEventHandler } from 'react';\n\ntype Item = {\n  id: string;\n  name: string;\n  stars: number;\n};\n\ntype Record =\n  | { state: 'ready'; fileName: string; }\n  | { state: 'loading'; fileName: string; }\n  | { state: 'success'; fileName: string; items: Item[]; }\n  | { state: 'error'; fileName: string; error: Error; }\n  ;\n\nconst App: FC = () => {\n  const [records, setRecords] = useState<Record[]>([]);\n  const [selectedRecordIndex, setSelectedRecordIndex] = useState<number | null>(null);\n\n  useEffect(() => {\n    void async function () {\n      const response = await fetch('data/index.log');\n      const text = await response.text();\n      const records: Record[] = text\n        .split('\\n')\n        // Remove newline\n        .slice(0, -1)\n        .map(fileName => ({\n          state: 'ready',\n          fileName,\n        }));\n\n      setRecords(records);\n      if (records.length > 0) {\n        setSelectedRecordIndex(records.length - 1);\n      }\n    }()\n  }, []);\n\n  useEffect(() => {\n    async function loadRecord(recordIndex: number) {\n      const record = records[recordIndex];\n\n      // Prevent loading an error which is already loading, loaded or failed\n      if (record.state !== 'ready') {\n        return;\n      }\n\n      // Mark the record as loading\n      setRecords(records.map((record, index) => index === recordIndex ? ({ state: 'loading', fileName: record.fileName }) : record));\n\n      const response = await fetch('data/' + record.fileName);\n      const text = await response.text();\n      const items: Item[] = text\n        .split('\\n')\n        // Remove headers & newline\n        .slice(1, -1)\n        .map(item => {\n          const [id, name, stars] = item.split(';');\n          return { id, name, stars: Number(stars) }\n        });\n\n      const _records = records.map((record, index) => {\n        if (index === recordIndex) {\n          return {\n            state: 'success' as const,\n            fileName: record.fileName,\n            items,\n          };\n        }\n\n        return record;\n      });\n\n      setRecords(_records);\n    }\n\n    if (selectedRecordIndex === null) {\n      return;\n    }\n\n    // Load the prev record for comparison\n    if (selectedRecordIndex > 0) {\n      loadRecord(selectedRecordIndex - 1);\n    }\n\n    // Load the selected record\n    loadRecord(selectedRecordIndex);\n\n    // Load the next record for comparison\n    if (selectedRecordIndex < records.length - 1) {\n      loadRecord(selectedRecordIndex + 1);\n    }\n  }, [selectedRecordIndex, records]);\n\n  const handleRecordSelectChange: ChangeEventHandler<HTMLSelectElement> = event => {\n    setSelectedRecordIndex(Number(event.currentTarget.value));\n  };\n\n  function renderRelatedRecord(record: Record, item: Item, sign: '+' | '-') {\n    if (record.state === 'ready' || record.state === 'loading') {\n      return 'Loading…';\n    }\n\n    if (record.state === 'error') {\n      return 'Error!';\n    }\n\n    const index = record.items.findIndex(i => i.id === item.id);\n    const comparedItem = record.items[index];\n    if (!comparedItem) {\n      return 'No match';\n    }\n\n    switch (sign) {\n      case '+': {\n        if (item.stars >= comparedItem.stars) {\n          return `+${item.stars - comparedItem.stars} (from ${comparedItem.stars})`;\n        } else {\n          return `-${item.stars - comparedItem.stars} (from ${comparedItem.stars})`;\n        }\n      }\n      case '-': {\n        if (item.stars >= comparedItem.stars) {\n          return `+${comparedItem.stars - item.stars} (from ${comparedItem.stars})`;\n        } else {\n          return `-${comparedItem.stars - item.stars} (from ${comparedItem.stars})`;\n        }\n      }\n    }\n  }\n\n  function renderSelectedRecord() {\n    if (!selectedRecordIndex) {\n      return 'No record is selected';\n    }\n\n    const selectedRecord = records[selectedRecordIndex];\n    if (selectedRecord.state === 'ready') {\n      return 'Selected ' + selectedRecord.fileName;\n    }\n\n    if (selectedRecord.state === 'loading') {\n      return 'Loading ' + selectedRecord.fileName + '…';\n    }\n\n    if (selectedRecord.state === 'error') {\n      return selectedRecord.error.message;\n    }\n\n    const prevRecord = selectedRecordIndex > 0 ? records[selectedRecordIndex - 1] : null;\n    const nextRecord = selectedRecordIndex < records.length - 1 ? records[selectedRecordIndex + 1] : null;\n    return (\n      <table>\n        <caption>{selectedRecord.fileName}</caption>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Stars</th>\n            <th>Gap</th>\n            {prevRecord && <th>Change from<br />{prevRecord.fileName}</th>}\n            {nextRecord && <th>Change from<br />{nextRecord.fileName}</th>}\n          </tr>\n        </thead>\n        <tbody>\n          {selectedRecord.items.map((item, index) => (\n            <tr key={item.id}>\n              <td>{index + 1}</td>\n              <td>{item.id}</td>\n              <td>{item.name}</td>\n              <td>{item.stars}</td>\n              <td>{index === 0 ? '' : (selectedRecord.items[index - 1].stars - item.stars)}</td>\n              {prevRecord && <td>{renderRelatedRecord(prevRecord, item, '+')}</td>}\n              {nextRecord && <td>{renderRelatedRecord(nextRecord, item, '-')}</td>}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n\n  return (\n    <div>\n      <select onChange={handleRecordSelectChange} value={selectedRecordIndex || undefined}>\n        {records.map((record, index) => <option key={record.fileName} value={index}>{record.fileName}</option>)}\n      </select>\n      {renderSelectedRecord()}\n    </div>\n  );\n}\n\nexport default App;\n","import './index.css';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}